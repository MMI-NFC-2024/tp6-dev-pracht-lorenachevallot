---
import Layout from "../layouts/Layout.astro";
import PlotFigure from "../components/PlotFigure.astro";
import * as Plot from "@observablehq/plot";
import penguins from "../assets/penguins.json";

const speciesList = [...new Set(penguins.map((p) => p.species))].sort();

const charts = speciesList.map((s) => {
  const data = penguins.filter((p) => p.species === s);
  const options = {
    grid: true,
    marks: [
      Plot.dot(data, {
        x: "culmen_length_mm",
        y: "culmen_depth_mm",
        fill: "steelblue",
        r: 3,
        fillOpacity: 0.7,
      }),
    ],
    x: { label: "Longueur du bec (mm)" },
    y: { label: "Profondeur du bec (mm)" },
    title: `Culmen: profondeur vs longueur — ${s}`,
  };
  return { species: s, options, count: data.length };
});
---

<Layout>
  <div class="min-h-screen bg-gradient-to-br from-indigo-50 via-violet-50 to-fuchsia-50 p-6 sm:p-8">
    <h1
      class="text-5xl sm:text-6xl text-center mb-12 sm:mb-16 bg-gradient-to-r from-indigo-600 to-violet-600 bg-clip-text text-transparent font-extrabold tracking-tight"
    >
      Manchots · Toutes les espèces
    </h1>

    <div class="max-w-6xl mx-auto flex flex-col gap-6 sm:gap-8">
      <div class="bg-white/90 backdrop-blur rounded-2xl shadow-xl border border-indigo-100 p-6 sm:p-8">
        <h2 class="text-xl sm:text-2xl font-light text-center mb-6 sm:mb-8 text-gray-700">
          Exploration interactive par espèce
        </h2>

        <div class="flex flex-wrap items-center justify-center gap-2 sm:gap-3" role="tablist" aria-label="Espèces de manchots">
          {speciesList.map((s, i) => (
            <button
              role="tab"
              aria-selected={i === 0}
              aria-controls={`panel-${s}`}
              id={`tab-${s}`}
              data-target={`panel-${s}`}
              class={`px-4 py-2 rounded-xl text-sm sm:text-base font-medium transition-all duration-300 shadow hover:shadow-md focus:outline-none focus:ring-2 focus:ring-indigo-300 border ${
                i === 0
                  ? "bg-gradient-to-r from-indigo-500 to-violet-500 text-white border-transparent hover:from-indigo-600 hover:to-violet-600"
                  : "bg-white text-gray-700 border-indigo-100 hover:bg-indigo-50"
              }`}
            >
              {s}
            </button>
          ))}
        </div>

        <div class="mt-6 sm:mt-8">
          {charts.map((c, i) => (
            <section
              id={`panel-${c.species}`}
              role="tabpanel"
              aria-labelledby={`tab-${c.species}`}
              class={`rounded-2xl border border-indigo-100/70 bg-white/80 p-4 sm:p-6 shadow-inner ${i === 0 ? "" : "hidden"}`}
            >
              <div class="flex items-baseline justify-between gap-4">
                <h3 class="text-lg sm:text-xl font-semibold text-gray-800">{c.species}</h3>
                <p class="text-sm text-gray-500">{c.count} individus</p>
              </div>
              <div class="mt-4">
                <PlotFigure options={c.options} />
              </div>
            </section>
          ))}
        </div>
      </div>

      <div class="bg-white/90 backdrop-blur rounded-2xl shadow-xl border border-indigo-100 p-6 sm:p-8">
        <h2 class="text-xl sm:text-2xl font-light text-center mb-6 sm:mb-8 text-gray-700">Navigation</h2>
        <ul class="flex flex-col sm:flex-row gap-3 sm:gap-4 items-center justify-center">
          <li>
            <a
              href="/"
              class="block px-6 sm:px-8 py-3 rounded-2xl text-base sm:text-lg font-medium text-white transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-[1.02] bg-gradient-to-r from-indigo-500 to-violet-500 hover:from-indigo-600 hover:to-violet-600"
            >
              Accueil
            </a>
          </li>
          <li>
            <a
              href="/rendu-dynamique"
              class="block px-6 sm:px-8 py-3 rounded-2xl text-base sm:text-lg font-medium text-white transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-[1.02] bg-gradient-to-r from-violet-500 to-fuchsia-500 hover:from-violet-600 hover:to-fuchsia-600"
            >
              Rendu dynamique
            </a>
          </li>
          <li>
            <a
              href="/rendu-statique"
              class="block px-6 sm:px-8 py-3 rounded-2xl text-base sm:text-lg font-medium text-white transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-[1.02] bg-gradient-to-r from-fuchsia-500 to-indigo-500 hover:from-fuchsia-600 hover:to-indigo-600"
            >
              Rendu statique
            </a>
          </li>
        </ul>
      </div>
    </div>
  </div>

  <script>
    const buttons = Array.from(document.querySelectorAll('[role="tab"]'));
    const panels = Array.from(document.querySelectorAll('[role="tabpanel"]'));
    function setActive(id){
      buttons.forEach(b=>{
        const on = b.dataset.target === id;
        b.setAttribute('aria-selected', String(on));
        b.classList.toggle('bg-white', !on);
        b.classList.toggle('text-gray-700', !on);
        b.classList.toggle('border-indigo-100', !on);
        b.classList.toggle('hover:bg-indigo-50', !on);
        b.classList.toggle('bg-gradient-to-r', on);
        b.classList.toggle('from-indigo-500', on);
        b.classList.toggle('to-violet-500', on);
        b.classList.toggle('hover:from-indigo-600', on);
        b.classList.toggle('hover:to-violet-600', on);
        b.classList.toggle('text-white', on);
        b.classList.toggle('border-transparent', on);
      });
      panels.forEach(p=>{
        p.classList.toggle('hidden', p.id !== id);
      });
    }
    buttons.forEach(b=> b.addEventListener('click', ()=> setActive(b.dataset.target)));
  </script>
</Layout>

